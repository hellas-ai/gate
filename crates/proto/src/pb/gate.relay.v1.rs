// This file is @generated by prost-build.
/// DNS challenge operations
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDnsChallengeRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub txt_value: ::prost::alloc::string::String,
    /// Optional TTL, default if 0
    #[prost(int32, tag = "3")]
    pub ttl_seconds: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDnsChallengeResponse {
    #[prost(oneof = "create_dns_challenge_response::Response", tags = "1, 2, 3")]
    pub response: ::core::option::Option<create_dns_challenge_response::Response>,
}
/// Nested message and enum types in `CreateDnsChallengeResponse`.
pub mod create_dns_challenge_response {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChallengeProgress {
        /// "creating", "propagating", "verifying"
        #[prost(string, tag = "1")]
        pub stage: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub message: ::prost::alloc::string::String,
        #[prost(int32, tag = "3")]
        pub estimated_seconds_remaining: i32,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChallengeComplete {
        #[prost(string, tag = "1")]
        pub record_id: ::prost::alloc::string::String,
        #[prost(int32, tag = "2")]
        pub propagation_estimate_seconds: i32,
        /// Whether challenge was verified
        #[prost(bool, tag = "3")]
        pub verified: bool,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Progress(ChallengeProgress),
        #[prost(message, tag = "2")]
        Complete(ChallengeComplete),
        #[prost(message, tag = "3")]
        Error(super::super::super::common::v1::Error),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CleanupDnsChallengeRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    /// Optional - can cleanup by domain if not provided
    #[prost(string, tag = "2")]
    pub record_id: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CleanupDnsChallengeResponse {
    #[prost(oneof = "cleanup_dns_challenge_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<cleanup_dns_challenge_response::Result>,
}
/// Nested message and enum types in `CleanupDnsChallengeResponse`.
pub mod cleanup_dns_challenge_response {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CleanupSuccess {
        #[prost(int32, tag = "1")]
        pub records_removed: i32,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Success(CleanupSuccess),
        #[prost(message, tag = "2")]
        Error(super::super::super::common::v1::Error),
    }
}
/// Rate limiting
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RateLimitRequest {
    /// "dns_challenge", etc.
    #[prost(string, tag = "1")]
    pub operation: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RateLimitResponse {
    #[prost(message, optional, tag = "1")]
    pub rate_limit: ::core::option::Option<rate_limit_response::RateLimit>,
}
/// Nested message and enum types in `RateLimitResponse`.
pub mod rate_limit_response {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RateLimit {
        /// Max concurrent operations per peer
        #[prost(uint32, tag = "1")]
        pub max_concurrent: u32,
        /// Current active operations
        #[prost(uint32, tag = "2")]
        pub current_count: u32,
        /// Hourly request limit
        #[prost(uint32, tag = "3")]
        pub requests_per_hour: u32,
        /// Requests used in current hour
        #[prost(uint32, tag = "4")]
        pub requests_used: u32,
        /// When counter resets
        #[prost(int64, tag = "5")]
        pub reset_timestamp: i64,
    }
}
/// DNS propagation checking
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckDnsPropagationRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub expected_value: ::prost::alloc::string::String,
    /// Max time to wait, default 300 (5 min)
    #[prost(int32, tag = "3")]
    pub timeout_seconds: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckDnsPropagationResponse {
    #[prost(oneof = "check_dns_propagation_response::Response", tags = "1, 2, 3")]
    pub response: ::core::option::Option<check_dns_propagation_response::Response>,
}
/// Nested message and enum types in `CheckDnsPropagationResponse`.
pub mod check_dns_propagation_response {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PropagationProgress {
        /// "checking", "waiting"
        #[prost(string, tag = "1")]
        pub stage: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub message: ::prost::alloc::string::String,
        /// Current attempt number
        #[prost(int32, tag = "3")]
        pub attempt: i32,
        /// Total attempts before timeout
        #[prost(int32, tag = "4")]
        pub max_attempts: i32,
        /// Seconds until next check
        #[prost(int32, tag = "5")]
        pub next_check_seconds: i32,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PropagationComplete {
        /// Whether DNS propagation was successful
        #[prost(bool, tag = "1")]
        pub propagated: bool,
        /// How many attempts it took
        #[prost(int32, tag = "2")]
        pub total_attempts: i32,
        /// Total time elapsed
        #[prost(int32, tag = "3")]
        pub elapsed_seconds: i32,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Progress(PropagationProgress),
        #[prost(message, tag = "2")]
        Complete(PropagationComplete),
        #[prost(message, tag = "3")]
        Error(super::super::super::common::v1::Error),
    }
}
/// Generated client implementations.
pub mod relay_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Relay protocol for DNS challenges only
    #[derive(Debug, Clone)]
    pub struct RelayServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> RelayServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RelayServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RelayServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// DNS challenge creation with streaming progress
        pub async fn create_dns_challenge(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateDnsChallengeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::CreateDnsChallengeResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gate.relay.v1.RelayService/CreateDnsChallenge",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("gate.relay.v1.RelayService", "CreateDnsChallenge"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// DNS challenge cleanup (unary since it's usually quick)
        pub async fn cleanup_dns_challenge(
            &mut self,
            request: impl tonic::IntoRequest<super::CleanupDnsChallengeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CleanupDnsChallengeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gate.relay.v1.RelayService/CleanupDnsChallenge",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("gate.relay.v1.RelayService", "CleanupDnsChallenge"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Check DNS propagation with streaming progress
        pub async fn check_dns_propagation(
            &mut self,
            request: impl tonic::IntoRequest<super::CheckDnsPropagationRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::CheckDnsPropagationResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gate.relay.v1.RelayService/CheckDnsPropagation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("gate.relay.v1.RelayService", "CheckDnsPropagation"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// Get rate limiting information
        pub async fn get_rate_limit(
            &mut self,
            request: impl tonic::IntoRequest<super::RateLimitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RateLimitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gate.relay.v1.RelayService/GetRateLimit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gate.relay.v1.RelayService", "GetRateLimit"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod relay_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RelayServiceServer.
    #[async_trait]
    pub trait RelayService: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the CreateDnsChallenge method.
        type CreateDnsChallengeStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::CreateDnsChallengeResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        /// DNS challenge creation with streaming progress
        async fn create_dns_challenge(
            &self,
            request: tonic::Request<super::CreateDnsChallengeRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::CreateDnsChallengeStream>,
            tonic::Status,
        >;
        /// DNS challenge cleanup (unary since it's usually quick)
        async fn cleanup_dns_challenge(
            &self,
            request: tonic::Request<super::CleanupDnsChallengeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CleanupDnsChallengeResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the CheckDnsPropagation method.
        type CheckDnsPropagationStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::CheckDnsPropagationResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        /// Check DNS propagation with streaming progress
        async fn check_dns_propagation(
            &self,
            request: tonic::Request<super::CheckDnsPropagationRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::CheckDnsPropagationStream>,
            tonic::Status,
        >;
        /// Get rate limiting information
        async fn get_rate_limit(
            &self,
            request: tonic::Request<super::RateLimitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RateLimitResponse>,
            tonic::Status,
        >;
    }
    /// Relay protocol for DNS challenges only
    #[derive(Debug)]
    pub struct RelayServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RelayServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RelayServiceServer<T>
    where
        T: RelayService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gate.relay.v1.RelayService/CreateDnsChallenge" => {
                    #[allow(non_camel_case_types)]
                    struct CreateDnsChallengeSvc<T: RelayService>(pub Arc<T>);
                    impl<
                        T: RelayService,
                    > tonic::server::ServerStreamingService<
                        super::CreateDnsChallengeRequest,
                    > for CreateDnsChallengeSvc<T> {
                        type Response = super::CreateDnsChallengeResponse;
                        type ResponseStream = T::CreateDnsChallengeStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateDnsChallengeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RelayService>::create_dns_challenge(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateDnsChallengeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gate.relay.v1.RelayService/CleanupDnsChallenge" => {
                    #[allow(non_camel_case_types)]
                    struct CleanupDnsChallengeSvc<T: RelayService>(pub Arc<T>);
                    impl<
                        T: RelayService,
                    > tonic::server::UnaryService<super::CleanupDnsChallengeRequest>
                    for CleanupDnsChallengeSvc<T> {
                        type Response = super::CleanupDnsChallengeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CleanupDnsChallengeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RelayService>::cleanup_dns_challenge(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CleanupDnsChallengeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gate.relay.v1.RelayService/CheckDnsPropagation" => {
                    #[allow(non_camel_case_types)]
                    struct CheckDnsPropagationSvc<T: RelayService>(pub Arc<T>);
                    impl<
                        T: RelayService,
                    > tonic::server::ServerStreamingService<
                        super::CheckDnsPropagationRequest,
                    > for CheckDnsPropagationSvc<T> {
                        type Response = super::CheckDnsPropagationResponse;
                        type ResponseStream = T::CheckDnsPropagationStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CheckDnsPropagationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RelayService>::check_dns_propagation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CheckDnsPropagationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gate.relay.v1.RelayService/GetRateLimit" => {
                    #[allow(non_camel_case_types)]
                    struct GetRateLimitSvc<T: RelayService>(pub Arc<T>);
                    impl<
                        T: RelayService,
                    > tonic::server::UnaryService<super::RateLimitRequest>
                    for GetRateLimitSvc<T> {
                        type Response = super::RateLimitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RateLimitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RelayService>::get_rate_limit(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRateLimitSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RelayServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "gate.relay.v1.RelayService";
    impl<T> tonic::server::NamedService for RelayServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
