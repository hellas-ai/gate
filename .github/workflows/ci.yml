name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: mkroening/rust-toolchain-toml@main
    - uses: Swatinem/rust-cache@v2
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Clippy
      run: cargo clippy --all-features -- -D warnings
    
    - name: Build
      run: cargo build --all-features
    
    - name: Test
      run: cargo test --all-features
  
  gui-build:
    name: GUI Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    steps:
    - uses: actions/checkout@v4
    
    - uses: DeterminateSystems/nix-installer-action@main
    
    - uses: DeterminateSystems/magic-nix-cache-action@main
    
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev
    
    - name: Build GUI with Nix
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          # Use Nix build directly on Linux to avoid AppImage bundling issues
          nix build .#gate-gui -L
          # Copy artifacts to expected location
          mkdir -p artifacts
          if [[ -f result/bin/gate-gui ]]; then
            cp -r result/* artifacts/
          fi
          if [[ -f result/share/*.deb ]]; then
            cp result/share/*.deb artifacts/
          fi
        else
          # Use make target for macOS
          nix develop --command make gui-build
        fi
    
    - name: Find and prepare artifacts
      run: |
        mkdir -p artifacts
        # Check multiple possible locations for artifacts
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          # Look in both standard and custom CARGO_TARGET_DIR locations
          for dir in target ~/cargo-builds/gate $HOME/cargo-builds/gate; do
            if [[ -d "$dir/release/bundle" ]]; then
              echo "Found bundles in $dir/release/bundle"
              cp -r $dir/release/bundle/dmg/*.dmg artifacts/ 2>/dev/null || true
              cp -r $dir/release/bundle/macos/*.app artifacts/ 2>/dev/null || true
              break
            fi
          done
          # Also check crates/gui/target
          if [[ -d "crates/gui/target/release/bundle" ]]; then
            echo "Found bundles in crates/gui/target/release/bundle"
            cp -r crates/gui/target/release/bundle/dmg/*.dmg artifacts/ 2>/dev/null || true
            cp -r crates/gui/target/release/bundle/macos/*.app artifacts/ 2>/dev/null || true
          fi
        fi
        # List what we found
        echo "Artifacts found:"
        ls -la artifacts/ || echo "No artifacts directory"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gate-gui-${{ matrix.target }}
        path: artifacts/*
        if-no-files-found: warn
